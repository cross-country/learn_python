#!/usr/local/bin/env python							-первая строка исполняемого скрипта
#!/usr/local/bin/python
Поля класса	 										-это переменные класса

"""	
These
are strings
of documentation!												
"""													-строки документации

"""tis is
a multiline
string """											-многострочная строка
sep=" "; end=" "    								-свойства ф-ции print()


							ВСТРОЕННЫЕ ФУНКЦИИ:

@staticmethod   									-декоратор
dir()         										-ф-ция возвращает список имен определяемых объектом(модули, функции, классы, переменные)
exec()	  											-функция исполняет строку, несколько строк(или файл .txt) как код, при этом не возвращает никакого значения(None) 
eval()    		 									-ф-ия исполняет строку(однострочную) как код (возвращает значение числовых вычислений).
repr()    		 									-оборачивает объект в кавычки
min()												-возвращает мин. значение исчисляемого объекта
max()												-возвращает макс. значение исчисляемого объекта
abs()												-возвращает абсолютное значение числа
sum()												-возвращает сумму исчисляемого числового объекта



				Методы всех объектов Python:
.__dict__											-встроенный атрибут объектов Python. Возвращает словарь(ключ:значение) {имя свойства(поля): текущее значение}
.__doc__   		 									-строки документации (help())								




				Методы классов, которые перегружают операторы и ф-ции:
__init__()											-конструктор объектов
__del__()											-дестрруктор (вызывается при удалении объекта)
__str__()											-преобразование объекта к строковому представлению (перегружает print(); str())
__add__()											-перегружает оператор сложения(объект участвует в сложении с левой стороны)
__setattr__()										-перегружает оператор присваивания
__getitem__()										-пер-ет операцию извлечения элемента по индексу(объект похож список)
__call__()											-позволяет использовать объект как функцию
__repr__()											-работает по аналогии с __str__(); обарачивает строку в дополнительные кавычки.
__sub__()											-вычитание
__mul__()											-умножение
__truediv__()										-деление


				Методы строки:
r" "    		 									-перед строкой означает необрабатываемую строку
.replace('old', 'new')								-заменяет элемент строки новым элементом
.upper()											-возвращает всю строку в верхнем регистре
.lower()											-в нижнем регистре
.isupper()											-True если все элементы в верхнем регистре
.islower()											-True если все элементы в нижнем регистре
.strip()											-видаляє елементи(пробіли за замовчуванням) на початку та в кінці рядка
.split(sep, maxsplit)											-разбивает строку и возвращает список. По умолчанию использует пробелы.
'-'.join(list)										-соединяет список в строку. Список передается как аргумент, разделитель
														прописывается в строке. Если разделитель не указан, по-умолчанию - это пробел.
\													-escape character
.find('str', 0, 8)									-находит подстроку и возвращает индекс первого элемента(иначе -1). Числовые аргументы указывают диапазон поиска.


				Методы словаря:
.items()    										-метод dictionary, который возвращает список кортежей (ключ, значение)






				Создание пакетов:
# в файле __init__.py
__all__ = ['file1', 'file2']
from .file1 import *
from ..file2 import *
from .folder import *
from . import file1, file2


				SQLite:
import sqlite3
connect()											-ф-я создает объект класса Connection
Connection.cursor()									-создает объект класса Сursor
Cursor.execute()									-с помощью этого метода задаются SQL-комманды
Cursor.executemany()
Cursor.executescript() 								-в аргументе передается скрипт на языке SQL
Cursor.fetchone()									-извлекает данные из объекта по одной строке
Cursor.fetchmany()									-извлекает данные из объекта	...
Cursor.fetchall()									-извлекает данные из объекта	...
Cursor.__next__()									-извлекает данные из объекта по одной строке
Connection.commit()									-
Connection.close()									-
Connection.rollback()								-



				Модули:
turtle:
	turtle.left()
	turtle.right()
	turtle.forward()
	turtle.backward()
	turtle.up()
	turtle.down()
	turtle.color()
	turtle.begin_fill()
	turtle.end_fill()
	turtle.circle()
	turtle.setheading()							-разворачивает черепашку в изначальное направление
	
copy:
	copy.copy()
	copy.deepcopy()
keyword:
	keyword.iskeyword('')
	keyword.kwlist
random:
	random.randint()							-принимает 2 аргумента(оба включительно)
	random.range()								-принимает 1, 2 или 3 аргумента(второй не включается), третий обозначает шаг
	random.random()								-не принимает аргументов, возвращает число от 0 до 1
	random.choice(list, tuple, str)				-возвращает один элемент в случайном порядке
	random.shuffle(list)						-изменяет порядок элементов случайным образом и возвращает измененный список

sys:
	sys.exit()									-выход из оболочки
	sys.stdin									-объект stdin служит для ввода информации в программу
	sys.stdin.readline()						-
	sys.stdout									-вывод сообщений в оболочке или консоли
	sys.stdout.write()							-
	sys.version									-

time:
	time.time()									-возвращает кол-во секунд начиная с 1970 г.
	time.asctime()								-принимает дату как аргумент и возвращает ее же в удобном виде(
													без аргумента возвращает текущую дату)
	time.localtime()							-возвращает дату и время в виде кортежа, который передается в asctime()
	time.sleep()								-прекращает выполнение скрипта на кол-во секунд указанных в аргументе

pickle:
												-модуль pickle сохраняет объекты python в бинарном виде
	pickle.dump(data_to_save, file_object)		-принимает 1)объект python(словарь, список ...) и 2)объект open(). Сохраняет данные преобразуя в bin.
	pickle.load(file_object)					-считывает данные, преобразуя обратно в объекты языка

re:
	re.match(pattern, string)					-регулярні вирази, шукає на початку
	re.search(p, s)								-шукає всі відповідності в тексті
	re.findall(p, s)							-шукає всі відповідності в тексті і повертає список відповідностей
	re.sub(p, p, s)								-заміщує в тексті один шаблон іншим
	
